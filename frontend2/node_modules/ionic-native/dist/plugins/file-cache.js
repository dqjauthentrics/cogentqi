"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = require('./plugin');
/**
 * @name File Cache
 * @description
 * Super awesome file cache for Cordova Apps
 * @usage
 * ```typescript
 * import {FileCache, FileCacheOptions} from 'ionic-native';
 *
 * let options: FileCacheOptions = {
 *     fsOptions: {
 *       storageSize: 50*1024*1024, // 50MB
 *       concurrency: 2 // download only 2 files at a time
 *     },
 *   };
 * ```
 */
var FileCache = (function () {
    function FileCache(options) {
        var promise;
        if (window.Promise) {
            promise = Promise;
        }
        else if (window.angular) {
            promise = $q;
        }
        else {
            console.warn('No promise support detected. Pass a promise library manually through the fs property of the options.');
            return;
        }
        options = options ? options : {};
        var fsOptions = options.fsOptions ? options.fsOptions : {};
        fsOptions.Promise = promise;
        options.fs = new CordovaPromiseFS(fsOptions);
        if (options.fsOptions) {
            delete options.fsOptions;
        }
        this._objectInstance = new CordovaFileCache(options);
    }
    Object.defineProperty(FileCache.prototype, "ready", {
        /**
         * Returns a promise that resolves when the cache storage is ready to be used.
         * @return {Promise<any[]>} a promsie that resolves when the storage is ready
         */
        get: function () { return this._objectInstance.ready; },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a file or multiple files to the cache
     * @param path {string|string[]} path(s) or URL(s) to file(s) that you wish to add
     * @return {boolean} returns a boolean that indicates whether the cache is dirty
     */
    FileCache.prototype.add = function (path) { return; };
    /**
     * Checks if cache is dirty (needs a download)
     * @return {boolean} returns a boolean that indicates whether the cache is dirty
     */
    FileCache.prototype.isDirty = function () { return; };
    /**
     * Downloads all the files that are added to cache
     * @param onProgress {Function} optional callback to be called on progress
     * @param includeFileProgress {Boolean} optional boolean to indicate whether you want progress for single files or the whole operation
     */
    FileCache.prototype.download = function (onProgress, includeFileProgress) { return; };
    /**
     * Gets the cached internal URL of the file
     * @param fileName {string} name of the file you would like to retrieve
     */
    FileCache.prototype.get = function (fileName) { return; };
    /**
     * Gets the cached internal URL of the file
     * @param fileNameOrUrl {string} name or URL of the file
     */
    FileCache.prototype.toInternalURL = function (fileNameOrUrl) { return; };
    /**
     * Get the URL of a file
     * @param fileName {string} name of the file
     */
    FileCache.prototype.toURL = function (fileName) { return; };
    /**
     * Gets Base64 encoded data URL
     * @param filename {string} name of file
     */
    FileCache.prototype.toDataURL = function (filename) { return; };
    /**
     * Abort all downloads
     */
    FileCache.prototype.abort = function () { };
    /**
     * Clear cache (removes localRoot directory)
     */
    FileCache.prototype.clear = function () { return; };
    /**
     * Remove a single file
     * @param filename {string} file name
     * @returns {Promise<any>} returns a promise that resolves when the file is removed
     */
    FileCache.prototype.remove = function (filename) { return; };
    /**
     * Returns path on Cordova Filesystem. i.e: '/cache/photo3.jpg'
     * @param fileName
     */
    FileCache.prototype.toPath = function (fileName) { return; };
    /**
     * Returns server URL to download
     * @param fileName
     */
    FileCache.prototype.toServerURL = function (fileName) { return; };
    /**
     * Returns a list of server URLs that need to be downloaded
     */
    FileCache.prototype.getDownloadQueue = function () { return; };
    /**
     * Returns a list of paths that are cached
     */
    FileCache.prototype.list = function () { return; };
    __decorate([
        plugin_1.InstanceProperty
    ], FileCache.prototype, "ready", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "add", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "isDirty", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "download", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "get", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "toInternalURL", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "toURL", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "toDataURL", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "abort", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "clear", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "remove", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "toPath", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "toServerURL", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "getDownloadQueue", null);
    __decorate([
        plugin_1.CordovaInstance({ sync: true })
    ], FileCache.prototype, "list", null);
    FileCache = __decorate([
        plugin_1.Plugin({
            plugin: 'cordova-file-cache',
            pluginRef: 'CordovaFileCache',
            repo: 'https://github.com/markmarijnissen/cordova-file-cache'
        })
    ], FileCache);
    return FileCache;
}());
exports.FileCache = FileCache;
//# sourceMappingURL=file-cache.js.map