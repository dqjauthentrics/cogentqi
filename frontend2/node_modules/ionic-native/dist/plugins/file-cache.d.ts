/**
 * @name File Cache
 * @description
 * Super awesome file cache for Cordova Apps
 * @usage
 * ```typescript
 * import {FileCache, FileCacheOptions} from 'ionic-native';
 *
 * let options: FileCacheOptions = {
 *     fsOptions: {
 *       storageSize: 50*1024*1024, // 50MB
 *       concurrency: 2 // download only 2 files at a time
 *     },
 *   };
 * ```
 */
export declare class FileCache {
    private _objectInstance;
    constructor(options?: FileCacheOptions);
    /**
     * Returns a promise that resolves when the cache storage is ready to be used.
     * @return {Promise<any[]>} a promsie that resolves when the storage is ready
     */
    ready: Promise<any[]>;
    /**
     * Adds a file or multiple files to the cache
     * @param path {string|string[]} path(s) or URL(s) to file(s) that you wish to add
     * @return {boolean} returns a boolean that indicates whether the cache is dirty
     */
    add(path: string | string[]): boolean;
    /**
     * Checks if cache is dirty (needs a download)
     * @return {boolean} returns a boolean that indicates whether the cache is dirty
     */
    isDirty(): boolean;
    /**
     * Downloads all the files that are added to cache
     * @param onProgress {Function} optional callback to be called on progress
     * @param includeFileProgress {Boolean} optional boolean to indicate whether you want progress for single files or the whole operation
     */
    download(onProgress?: (e: {
        queueIndex;
        queueSize;
    }) => {}, includeFileProgress?: boolean): Promise<any>;
    /**
     * Gets the cached internal URL of the file
     * @param fileName {string} name of the file you would like to retrieve
     */
    get(fileName: string): string;
    /**
     * Gets the cached internal URL of the file
     * @param fileNameOrUrl {string} name or URL of the file
     */
    toInternalURL(fileNameOrUrl: string): string;
    /**
     * Get the URL of a file
     * @param fileName {string} name of the file
     */
    toURL(fileName: string): string;
    /**
     * Gets Base64 encoded data URL
     * @param filename {string} name of file
     */
    toDataURL(filename: string): Promise<string>;
    /**
     * Abort all downloads
     */
    abort(): void;
    /**
     * Clear cache (removes localRoot directory)
     */
    clear(): Promise<any>;
    /**
     * Remove a single file
     * @param filename {string} file name
     * @returns {Promise<any>} returns a promise that resolves when the file is removed
     */
    remove(filename: string): Promise<any>;
    /**
     * Returns path on Cordova Filesystem. i.e: '/cache/photo3.jpg'
     * @param fileName
     */
    toPath(fileName: string): string;
    /**
     * Returns server URL to download
     * @param fileName
     */
    toServerURL(fileName: string): Promise<any>;
    /**
     * Returns a list of server URLs that need to be downloaded
     */
    getDownloadQueue(): Promise<string[]>;
    /**
     * Returns a list of paths that are cached
     */
    list(): Promise<any>;
}
export interface FileCacheOptions {
    /**
     * @private
     * Promise library to use, must create instance of CordovaPromiseFS and pass fs parameter.
     * No need to define this, Ionic Native takes care of it.
     */
    fs?: any;
    /**
     * hash or mirror
     */
    mode?: string;
    /**
     * Folder to store data
     * Defaults to data
     */
    localRoot?: string;
    /**
     * This is needed for mirror mode
     */
    serverRoot?: string;
    /**
     * Defaults to false, if set to true, it will prepend the urls with a timestamp to avoid network cache
     */
    cacheBuster?: boolean;
    /**
     * CordovaFS (Filesystem library) Options
     */
    fsOptions?: {
        /**
         * Storage size in bytes.
         * Defaults to 20MB
         */
        storageSize?: number;
        /**
         * Defaults to true
         */
        persistent?: boolean;
        /**
         * How many concurrent uploads/downloads
         * defaults to 3
         */
        concurrency?: number;
        /**
         * @private
         * Promise library.
         * Ionic native handles this.
         */
        Promise?: any;
    };
}
